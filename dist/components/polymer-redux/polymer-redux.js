!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.PolymerRedux=t()}(this,function(){function e(e,t){var r=[];return null!=e.properties&&Object.keys(e.properties).forEach(function(n){var o=e.properties[n];o.hasOwnProperty("statePath")&&(o.notify&&!o.readOnly&&console.warn(i,e.is,n),r.push({name:n,path:o.statePath||t.getState,readOnly:o.readOnly,type:o.type}))}),function(){var n=t.getState();r.forEach(function(t){var r,i,o=t.name,a=[],s=t.path;if(r="function"==typeof s?s.call(e,n):Polymer.Base.get(s,n),i=e.get(t.name),r!==i){if(t.type===Array){if(r=r||[],i=i||[],!Array.isArray(r))throw new TypeError("<"+e.is+">."+o+" type is Array but given: "+typeof r);a=Polymer.ArraySplice.calculateSplices(r,i)}t.readOnly?e.notifyPath(o,r):e.set(o,r),a.length&&e.notifySplices(o,a)}}),e.fire("state-changed",n)}}function t(t,r){var n;t._reduxUnsubscribe||(n=e(t,r),n(),t._reduxUnsubscribe=r.subscribe(n))}function r(e){"function"==typeof e._reduxUnsubscribe&&(e._reduxUnsubscribe(),delete e._reduxUnsubscribe)}function n(e,t,r){var n=r[0],i=e.actions;if(i&&"string"==typeof n){if("function"!=typeof i[n])throw new TypeError("Polymer Redux: <"+e.is+'> has no action "'+n+'"');return t.dispatch(i[n].apply(e,r.slice(1)))}return"function"==typeof n&&0===n.length?t.dispatch(n()):t.dispatch(n)}var i='Polymer Redux: <%s>.%s has "notify" enabled, two-way bindings goes against Redux\'s paradigm';return function(e){var i;if(!e)throw new TypeError("missing redux store");return i={ready:function(){t(this,e)},attached:function(){t(this,e)},detached:function(){r(this)},dispatch:function(t){var r=Array.prototype.slice.call(arguments);return n(this,e,r)},getState:function(){return e.getState()}}}});