function catches(e,t){try{t(),ok(!1,"Expecting exception "+e+", none caught")}catch(t){same(t,e,"Correct exception caught")}}function countCalls(e){function t(){t.callCount+=1,"function"==typeof e&&e.apply(this,arguments)}return t.callCount=0,t}function makeRequest(e,t){var a=new XMLHttpRequest;a.open("POST","http://some.host/path",!0,"bender","rodriguez"),"function"==typeof e&&(a.onload=e),"function"==typeof t&&(a.onerror=t),a.send("Hey meatbag!")}module("MockHttpRequest"),test("Initial state",function(){var e=new MockHttpRequest;equals(e.readyState,e.UNSENT,"readyState is UNSENT")}),test("open(): invalid uses",function(){catches("INVALID_METHOD",function(){var e=new MockHttpRequest;e.open()}),catches("INVALID_URL",function(){var e=new MockHttpRequest;e.open("GET")}),catches("INVALID_METHOD",function(){var e=new MockHttpRequest;e.open(1)}),catches("INVALID_URL",function(){var e=new MockHttpRequest;e.open("GET",1)}),catches("SECURITY_ERR",function(){var e=new MockHttpRequest;e.open("connect","http://some.host/path")}),catches("SECURITY_ERR",function(){var e=new MockHttpRequest;e.open("trace","http://some.host/path")}),catches("SECURITY_ERR",function(){var e=new MockHttpRequest;e.open("track","http://some.host/path")})}),test("open(): method mangling",function(){var e;e=new MockHttpRequest,e.open("smurf","http://some.host/path"),equals(e.method,"smurf"),e=new MockHttpRequest,e.open("put","http://some.host/path"),equals(e.method,"PUT")}),test("open(): default values for arguments",function(){var e=new MockHttpRequest;e.open("get","http://some.host/path"),equals(e.url,"http://some.host/path"),equals(e.async,!0,"Async flag defaults to true"),equals(e.readyState,e.OPENED,"readyState is OPENED")}),test("open(): explicit arguments",function(){var e=new MockHttpRequest;e.open("post","http://some.host/path",!1,"bender","rodriguez"),equals(e.method,"POST"),equals(e.url,"http://some.host/path"),equals(e.async,!1,"Async flag"),equals(e.user,"bender"),equals(e.password,"rodriguez"),equals(e.readyState,e.OPENED,"readyState is OPENED")}),test("open(): URL elements",function(){var e=new MockHttpRequest;e.open("get","https://frodo:preciousss@some.host/path/to/file?foo=bar&zeit=geist#hashpipe"),equals(e.urlParts.protocol,"https"),equals(e.urlParts.userInfo,"frodo:preciousss"),equals(e.urlParts.user,"frodo"),equals(e.urlParts.password,"preciousss"),equals(e.urlParts.host,"some.host"),equals(e.urlParts.port,""),equals(e.urlParts.path,"/path/to/file"),equals(e.urlParts.query,"foo=bar&zeit=geist"),same(e.urlParts.queryKey,{foo:"bar",zeit:"geist"}),equals(e.urlParts.anchor,"hashpipe")}),test("setRequestHeader(): invalid headers",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path"),e.setRequestHeader("Cookie","Welcome to the world of tomorrow!"),equals(e.getRequestHeader("Cookie"),void 0,"Invalid header not accepted"),e.setRequestHeader("Proxy-Authenticate","I am Bender, please insert girder!"),equals(e.getRequestHeader("Proxy-Authenticate"),void 0,"Invalid header not accepted"),e.setRequestHeader("Proxy-","Pathological case"),equals(e.getRequestHeader("Proxy-"),void 0,"Invalid header not accepted"),e.setRequestHeader("Sec-Something","I am Bender!"),equals(e.getRequestHeader("Sec-Something"),void 0,"Invalid header not accepted"),e.setRequestHeader("Sec-","Pathological case"),equals(e.getRequestHeader("Sec-"),void 0,"Invalid header not accepted"),e.setRequestHeader("refeRer","http://secret.site"),equals(e.getRequestHeader("refeRer"),void 0,"Invalid header not accepted (case-insensitive)")}),test("setRequestHeader() and getRequestHeader()",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path"),equals(e.getRequestHeader("Content-Type"),void 0,"Non-existent header"),e.setRequestHeader("Content-Type","application/robot"),equals(e.getRequestHeader("Content-Type"),"application/robot"),equals(e.getRequestHeader("content-TYPE"),"application/robot","Case insensitivity")}),test("setRequestHeader(): multiple values",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path"),e.setRequestHeader("Accept","text/html"),e.setRequestHeader("Accept","application/xhtml+xml"),equals(e.getRequestHeader("Accept"),"text/html, application/xhtml+xml")}),test("send(): invalid state",function(){var e;e=new MockHttpRequest,catches("INVALID_STATE_ERR",function(){e.send()}),e=new MockHttpRequest,e.open("HEAD","http://some.host/path"),e.send("Hey meatbag!"),catches("INVALID_STATE_ERR",function(){e.send()})}),test("send(): HEAD, GET",function(){var e;e=new MockHttpRequest,e.open("HEAD","http://some.host/path"),e.send("Hey meatbag!"),equals(e.requestText,null,"HEAD request has no body"),e=new MockHttpRequest,e.open("GET","http://some.host/path"),e.send("Hey meatbag!"),equals(e.requestText,null,"GET request has no body")}),test("send(): with data, onsend()",function(){var e=new MockHttpRequest;e.onsend=countCalls(),e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),equals(e.requestText,"Hey meatbag!","Request body is passed"),equals(e.onsend.callCount,1,"onsend was called exactly once")}),test("abort(): before receiving data",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.setRequestHeader("Content-Type","application/robot"),e.send("Hey meatbag!"),e.onabort=countCalls(),e.onreadystatechange=countCalls(),e.abort(),equals(e.readyState,e.UNSENT,"State is UNSENT after abort"),equals(e.onabort.callCount,1,"onabort() was called once."),equals(e.onreadystatechange.callCount,1,"onreadystatechange() was called once"),equals(e.getRequestHeader("Content-Type"),void 0,"Request headers are cleared"),equals(e.requestText,void 0,"Request body is cleared")}),test("abort(): after receiving data",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),e.receive(200,"Yes, Bender?"),e.abort(),equals(e.readyState,e.UNSENT,"State is UNSENT after abort"),equals(e.responseText,null,"Response body is cleared"),equals(e.responseXML,null,"xml response body is cleared")}),test("receive(): invalid state",function(){var e=new MockHttpRequest;catches("INVALID_STATE_ERR",function(){e.receive(200,"Yes, Bender?")}),e.open("POST","http://some.host/path"),catches("INVALID_STATE_ERR",function(){e.receive(200,"Yes, Bender?")})}),test("receive()",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!");var t=[];e.onreadystatechange=function(){t.push(e.readyState)},e.onprogress=countCalls(),e.onload=countCalls(),e.receive(200,"Yes, Bender?"),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),equals(e.responseText,"Yes, Bender?","Response body"),equals(e.responseXML,null,"xml response body is cleared"),same(t,[e.HEADERS_RECEIVED,e.LOADING,e.DONE],"All states are visited in correct order"),ok(e.onprogress.callCount,"onprogress() was called at least once"),equals(e.onload.callCount,1,"onload() was called exactly once")}),test("receive() XML",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!");var t=[];e.onreadystatechange=function(){t.push(e.readyState)},e.onprogress=countCalls(),e.onload=countCalls(),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),equals(e.responseText,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>',"Response body"),ok(e.responseXML,"XML arrived"),ok(1==e.responseXML.childNodes.length||2==e.responseXML.childNodes.length,"xml content ok"),equals(e.responseXML.childNodes[e.responseXML.childNodes.length-1].tagName,"payload","xml content ok"),same(t,[e.HEADERS_RECEIVED,e.LOADING,e.DONE],"All states are visited in correct order"),ok(e.onprogress.callCount,"onprogress() was called at least once"),equals(e.onload.callCount,1,"onload() was called exactly once")}),test("receive() wrong XML",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!");var t=[];e.onreadystatechange=function(){t.push(e.readyState)},e.onprogress=countCalls(),e.onload=countCalls(),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><<payload> Wicked! <<'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),equals(e.responseText,'<?xml version="1.0" encoding="utf-8" ?><<payload> Wicked! <<'),equals(e.responseXML,null,"no XML arrived"),same(t,[e.HEADERS_RECEIVED,e.LOADING,e.DONE],"All states are visited in correct order"),ok(e.onprogress.callCount,"onprogress() was called at least once"),equals(e.onload.callCount,1,"onload() was called exactly once")}),test("receive() XML null body",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!");var t=[];e.onreadystatechange=function(){t.push(e.readyState)},e.onprogress=countCalls(),e.onload=countCalls(),e.receive(200,null),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),equals(e.responseText,null),equals(e.responseXML,null,"no XML arrived"),same(t,[e.HEADERS_RECEIVED,e.LOADING,e.DONE],"All states are visited in correct order"),ok(e.onprogress.callCount,"onprogress() was called at least once"),equals(e.onload.callCount,1,"onload() was called exactly once")}),test("receive() XML wrong response type",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!");var t=[];e.onreadystatechange=function(){t.push(e.readyState)},e.onprogress=countCalls(),e.onload=countCalls(),e.setResponseHeader("Content-Type","application/robot"),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),equals(e.responseText,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>',"Response body"),equals(e.responseXML,null,"wrong response header, no xml"),same(t,[e.HEADERS_RECEIVED,e.LOADING,e.DONE],"All states are visited in correct order"),ok(e.onprogress.callCount,"onprogress() was called at least once"),equals(e.onload.callCount,1,"onload() was called exactly once")}),test("receive() XML mimetype application/xml",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),e.setResponseHeader("Content-Type","application/xml"),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),ok(e.responseXML,"XML arrived")}),test("receive() XML mimetype text/xml",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),e.setResponseHeader("Content-Type","text/xml"),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),ok(e.responseXML,"XML arrived")}),test("receive() XML mimetype with charset",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),e.setResponseHeader("Content-Type","text/xml; charset=UTF-8"),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautifül</command><command day="nicer">Beautifül</command><command day="nicest">Beautifül</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),ok(e.responseXML,"XML arrived"),ok(1==e.responseXML.childNodes.length||2==e.responseXML.childNodes.length,"xml content ok"),equals(e.responseXML.lastChild.tagName,"payload","xml content ok"),equals(e.responseXML.lastChild.lastChild.firstChild.data,"Beautifül","xml content ok")}),test("receive() XML mimetype ...+xml",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.send("Hey meatbag!"),e.setResponseHeader("Content-Type","application/robot+xml"),e.receive(200,'<?xml version="1.0" encoding="utf-8" ?><payload><!--  --><command day="nice">Beautiful</command><command day="nicer">Beautiful</command><command day="nicest">Beautiful</command></payload>'),equals(e.readyState,e.DONE,"State is DONE after receive"),equals(e.status,200,"HTTP status"),equals(e.statusText,"200 OK","HTTP status text"),ok(e.responseXML,"XML arrived")}),test("err(): invalid state",function(){var e=new MockHttpRequest;catches("INVALID_STATE_ERR",function(){e.err("NETWORK_ERR")}),e.open("POST","http://some.host/path"),catches("INVALID_STATE_ERR",function(){e.err("NETWORK_ERR")})}),test("err(): async",function(){var e=new MockHttpRequest;e.open("POST","http://some.host/path"),e.setRequestHeader("Content-Type","application/robot"),e.send("Hey meatbag!"),e.onerror=countCalls(),e.err("NETWORK_ERR"),equals(e.readyState,e.DONE,"State is DONE after error"),equals(e.responseText,null,"Response body is cleared"),equals(e.onerror.callCount,1,"onerror() was called exactly once")}),test("err(): synchronous",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path",!1),e.send(),e.onerror=countCalls(),catches("NETWORK_ERR",function(){e.err("NETWORK_ERR")}),equals(e.readyState,e.DONE,"State is DONE after error"),equals(e.responseText,null,"Response body is cleared"),equals(e.onerror.callCount,0,"onerror() wasn't called")}),test("getResponseHeader(): invalid state",function(){var e=new MockHttpRequest;e.setResponseHeader("Content-Type","application/robot"),equals(e.getResponseHeader("Content-Type"),void 0,"Response header can't be read in invalid state"),e.open("GET","http://some.host/path"),equals(e.getResponseHeader("Content-Type"),void 0,"Response header can't be read in invalid state"),e.send(),e.receive(200,""),e.abort(),equals(e.getResponseHeader("Content-Type"),void 0,"Response header can't be read after abort")}),test("getResponseHeader() et.al.",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path"),e.send(),e.receive(200,"Bite my shiny metal a**"),equals(e.getResponseHeader("Content-Type"),void 0,"Non-existent header"),e.setResponseHeader("Content-Type","application/robot"),equals(e.getResponseHeader("Content-Type"),"application/robot"),equals(e.getResponseHeader("CONTENT-type"),"application/robot","Case insensitivity"),e.setResponseHeader("Content-Length","23"),e.setResponseHeader("Set-Cookie","Chocolate chip"),e.setResponseHeader("Set-Cookie2","Raisin"),equals(e.getAllResponseHeaders(),"content-type: application/robot\r\ncontent-length: 23\r\n","getAllResponseHeaders")}),test("authenticate(): parameters to open()",function(){var e=new MockHttpRequest;e.open("GET","http://bender:bitemyshiny@some.host/path",!0,"frodo","preciousss"),e.setRequestHeader("Authorization","Basic "+btoa("bender:rodriguez")),ok(e.authenticate("frodo","preciousss")),ok(!e.authenticate("bender","bitemyshiny")),ok(!e.authenticate("bender","rodriguez"))}),test("authenticate(): URL parameters",function(){var e=new MockHttpRequest;e.open("GET","http://bender:bitemyshiny@some.host/path",!0),e.setRequestHeader("Authorization","Basic "+btoa("bender:rodriguez")),ok(!e.authenticate("frodo","preciousss")),ok(e.authenticate("bender","bitemyshiny")),ok(!e.authenticate("bender","rodriguez"))}),test("authenticate(): Authorization header (Basic auth)",function(){var e=new MockHttpRequest;e.open("GET","http://some.host/path",!0),e.setRequestHeader("Authorization","Basic "+btoa("bender:rodriguez")),ok(!e.authenticate("frodo","preciousss")),ok(!e.authenticate("bender","bitemyshiny")),ok(e.authenticate("bender","rodriguez"))}),module("MockHttpServer"),test("Simple request",function(){var e=new MockHttpServer;e.handle=countCalls(function(e){equals(e.readyState,e.OPENED,"Received open request"),equals(e.requestText,"Hey meatbag!","Received request body"),e.receive(200,"Bite my shiny metal a**")}),e.start();var t=countCalls();makeRequest(t),e.stop(),equals(e.handle.callCount,1,"One request received"),equals(t.callCount,1,"onload called exactly once")}),test("Simple request, handler directly passed",function(){var e=new MockHttpServer(countCalls(function(e){equals(e.readyState,e.OPENED,"Received open request"),equals(e.requestText,"Hey meatbag!","Received request body"),e.receive(200,"Bite my shiny metal a**")}));e.start();var t=countCalls();makeRequest(t),e.stop(),equals(e.handle.callCount,1,"One request received"),equals(t.callCount,1,"onload called exactly once")}),test("Multiple requests",function(){var e=new MockHttpServer(countCalls(function(e){equals(e.readyState,e.OPENED,"Received open request"),equals(e.requestText,"Hey meatbag!","Received request body"),e.receive(200,"Bite my shiny metal a**")}));e.start();var t=countCalls();makeRequest(t),makeRequest(t),makeRequest(t),e.stop(),equals(e.handle.callCount,3,"Three requests received"),equals(t.callCount,3,"onload called exactly three times")}),test("Network error",function(){var e=new MockHttpServer(countCalls(function(e){equals(e.readyState,e.OPENED,"Received open request"),equals(e.requestText,"Hey meatbag!","Received request body"),e.err("NETWORK_ERR")}));e.start();var t=countCalls();makeRequest(void 0,t),e.stop(),equals(e.handle.callCount,1,"One request received"),equals(t.callCount,1,"onerror called exactly once")});